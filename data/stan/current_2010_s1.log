Starting current_2010_s1 on  Sun Jul 31 16:26:09 UTC 2016
Running mctd_foursurf.R for year  2010  session  1
Loading required package: ggplot2
Loading required package: StanHeaders
rstan (Version 2.11.1, packaged: 2016-07-28 18:19:31 UTC, GitRev: 85f7a56811da)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
R version 3.3.1 (2016-06-21)
Platform: x86_64-apple-darwin13.4.0 (64-bit)
Running under: OS X 10.11.6 (El Capitan)

locale:
[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8

attached base packages:
[1] stats     graphics  grDevices utils     datasets  base     

other attached packages:
[1] rstan_2.11.1       StanHeaders_2.11.0 ggplot2_2.1.0     

loaded via a namespace (and not attached):
 [1] colorspace_1.2-6 scales_0.4.0     plyr_1.8.4       inline_0.3.14   
 [5] gtable_0.2.0     gridExtra_2.2.1  Rcpp_0.12.6      grid_3.3.1      
 [9] methods_3.3.1    stats4_3.3.1     munsell_0.4.3   
structure(list(Tube = c(9L, 10L, 11L, 12L, 13L, 14L, 15L, 16L, 
17L, 18L, 19L, 20L, 33L, 34L, 35L, 36L, 37L, 38L, 39L, 40L, 41L, 
42L, 43L, 44L, 45L, 46L, 47L, 48L, 49L, 51L, 52L, 53L, 54L, 55L, 
56L, 57L, 58L, 59L, 60L, 62L, 63L, 64L, 65L, 66L, 67L, 69L, 70L, 
71L, 72L, 73L, 74L, 75L, 76L, 77L, 78L, 79L, 80L, 81L, 82L, 83L, 
84L, 85L, 86L, 87L, 88L, 89L, 90L, 91L, 92L, 93L, 94L, 95L, 96L
), Tube_alias = 1:73), .Names = c("Tube", "Tube_alias"), row.names = c(NA, 
-73L), class = "data.frame")
   Tube Tube_alias
1     9          1
2    10          2
3    11          3
4    12          4
5    13          5
6    14          6
7    15          7
8    16          8
9    17          9
10   18         10
11   19         11
12   20         12
13   33         13
14   34         14
15   35         15
16   36         16
17   37         17
18   38         18
19   39         19
20   40         20
21   41         21
22   42         22
23   43         23
24   44         24
25   45         25
26   46         26
27   47         27
28   48         28
29   49         29
30   51         30
31   52         31
32   53         32
33   54         33
34   55         34
35   56         35
36   57         36
37   58         37
38   59         38
39   60         39
40   62         40
41   63         41
42   64         42
43   65         43
44   66         44
45   67         45
46   69         46
47   70         47
48   71         48
49   72         49
50   73         50
51   74         51
52   75         52
53   76         53
54   77         54
55   78         55
56   79         56
57   80         57
58   81         58
59   82         59
60   83         60
61   84         61
62   85         62
63   86         63
64   87         64
65   88         65
66   89         66
67   90         67
68   91         68
69   92         69
70   93         70
71   94         71
72   95         72
73   96         73
[1] "Using data from 2010 , session 1"
[1] "Crop name-to-number key:"
              num          name first_tube last_tube first_tube_alias
Maize-Soybean   1 Maize-Soybean          9        20                1
Switchgrass     2   Switchgrass         49        72               29
Miscanthus      3    Miscanthus         33        48               13
Prairie         4       Prairie         73        96               50
              last_tube_alias n_tubes
Maize-Soybean              12      12
Switchgrass                49      21
Miscanthus                 28      16
Prairie                    73      24
[1] "conditions for predicted data:"
   tube depth       Species
1     1     1   Switchgrass
2     2     1    Miscanthus
3     3     1       Prairie
4     4     1 Maize-Soybean
5     1     8   Switchgrass
6     2     8    Miscanthus
7     3     8       Prairie
8     4     8 Maize-Soybean
9     1    15   Switchgrass
10    2    15    Miscanthus
11    3    15       Prairie
12    4    15 Maize-Soybean
13    1    21   Switchgrass
14    2    21    Miscanthus
15    3    21       Prairie
16    4    21 Maize-Soybean
17    1    28   Switchgrass
18    2    28    Miscanthus
19    3    28       Prairie
20    4    28 Maize-Soybean
21    1    35   Switchgrass
22    2    35    Miscanthus
23    3    35       Prairie
24    4    35 Maize-Soybean
25    1    42   Switchgrass
26    2    42    Miscanthus
27    3    42       Prairie
28    4    42 Maize-Soybean
29    1    49   Switchgrass
30    2    49    Miscanthus
31    3    49       Prairie
32    4    49 Maize-Soybean
33    1    55   Switchgrass
34    2    55    Miscanthus
35    3    55       Prairie
36    4    55 Maize-Soybean
37    1    62   Switchgrass
38    2    62    Miscanthus
39    3    62       Prairie
40    4    62 Maize-Soybean
41    1    69   Switchgrass
42    2    69    Miscanthus
43    3    69       Prairie
44    4    69 Maize-Soybean
45    1    76   Switchgrass
46    2    76    Miscanthus
47    3    76       Prairie
48    4    76 Maize-Soybean
49    1    82   Switchgrass
50    2    82    Miscanthus
51    3    82       Prairie
52    4    82 Maize-Soybean
53    1    89   Switchgrass
54    2    89    Miscanthus
55    3    89       Prairie
56    4    89 Maize-Soybean
57    1    96   Switchgrass
58    2    96    Miscanthus
59    3    96       Prairie
60    4    96 Maize-Soybean
61    1   103   Switchgrass
62    2   103    Miscanthus
63    3   103       Prairie
64    4   103 Maize-Soybean
65    1   110   Switchgrass
66    2   110    Miscanthus
67    3   110       Prairie
68    4   110 Maize-Soybean
69    1   116   Switchgrass
70    2   116    Miscanthus
71    3   116       Prairie
72    4   116 Maize-Soybean
73    1   123   Switchgrass
74    2   123    Miscanthus
75    3   123       Prairie
76    4   123 Maize-Soybean
77    1   130   Switchgrass
78    2   130    Miscanthus
79    3   130       Prairie
80    4   130 Maize-Soybean

TRANSLATING MODEL 'mctd_foursurf' FROM Stan CODE TO C++ CODE NOW.
DIAGNOSTIC(S) FROM PARSER:
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.
Warning (non-fatal): assignment operator <- deprecated in the Stan language; use = instead.

successful in parsing the Stan model 'mctd_foursurf'.

CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.
starting worker pid=26520 on localhost:11255 at 11:26:14.384
starting worker pid=26528 on localhost:11255 at 11:26:14.578
starting worker pid=26536 on localhost:11255 at 11:26:14.773
starting worker pid=26544 on localhost:11255 at 11:26:14.973
starting worker pid=26552 on localhost:11255 at 11:26:15.181

CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 1).

Chain 1, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 2).

Chain 2, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 3).

Chain 3, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 4).

Chain 4, Iteration:    1 / 5000 [  0%]  (Warmup)
CHECKING DATA AND PREPROCESSING FOR MODEL 'mctd_foursurf' NOW.

COMPILING MODEL 'mctd_foursurf' NOW.

STARTING SAMPLER FOR MODEL 'mctd_foursurf' NOW.

SAMPLING FOR MODEL 'mctd_foursurf' NOW (CHAIN 5).

Chain 5, Iteration:    1 / 5000 [  0%]  (Warmup)
Chain 1, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 2, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 5, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 3, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 4, Iteration:  500 / 5000 [ 10%]  (Warmup)
Chain 2, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 2, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 1, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 1, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 5, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 5, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 4, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 4, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 3, Iteration: 1000 / 5000 [ 20%]  (Warmup)
Chain 3, Iteration: 1001 / 5000 [ 20%]  (Sampling)
Chain 2, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 1, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 4, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 5, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 3, Iteration: 1500 / 5000 [ 30%]  (Sampling)
Chain 2, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 4, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 1, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 5, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 3, Iteration: 2000 / 5000 [ 40%]  (Sampling)
Chain 2, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 4, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 1, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 5, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 3, Iteration: 2500 / 5000 [ 50%]  (Sampling)
Chain 2, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 4, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 1, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 5, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 3, Iteration: 3000 / 5000 [ 60%]  (Sampling)
Chain 2, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 4, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 1, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 3, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 5, Iteration: 3500 / 5000 [ 70%]  (Sampling)
Chain 2, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 4, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 1, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 3, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 2, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 4, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 5, Iteration: 4000 / 5000 [ 80%]  (Sampling)
Chain 1, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 3, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 2, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 36.9743 seconds (Warm-up)
               137.4 seconds (Sampling)
               174.375 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 2
                                                                                             count
Exception thrown at line 124: lognormal_log: Scale parameter[1] is inf, but must be finite!      9
Exception thrown at line 124: lognormal_log: Scale parameter[28] is inf, but must be finite!     1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
If the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 4, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 42.5323 seconds (Warm-up)
               131.888 seconds (Sampling)
               174.42 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 4
                                                                                            count
Exception thrown at line 124: lognormal_log: Scale parameter[1] is inf, but must be finite!     7
Exception thrown at line 114: normal_log: Scale parameter is 0, but must be > 0!                1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
If the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 5, Iteration: 4500 / 5000 [ 90%]  (Sampling)
Chain 3, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 48.7508 seconds (Warm-up)
               137.467 seconds (Sampling)
               186.217 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 3
                                                                                            count
Exception thrown at line 124: lognormal_log: Scale parameter[1] is inf, but must be finite!     8
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
If the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 1, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 39.2774 seconds (Warm-up)
               149.196 seconds (Sampling)
               188.473 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 1
                                                                                            count
Exception thrown at line 124: lognormal_log: Scale parameter[1] is inf, but must be finite!     7
Exception thrown at line 114: normal_log: Scale parameter is 0, but must be > 0!                1
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
If the number in the 'count' column is small, do not ask about this message on stan-users.

Chain 5, Iteration: 5000 / 5000 [100%]  (Sampling)
 Elapsed Time: 40.1744 seconds (Warm-up)
               150.131 seconds (Sampling)
               190.305 seconds (Total)

The following numerical problems occured the indicated number of times after warmup on chain 5
                                                                                            count
Exception thrown at line 124: lognormal_log: Scale parameter[1] is inf, but must be finite!     7
When a numerical problem occurs, the Hamiltonian proposal gets rejected.
If the number in the 'count' column is small, do not ask about this message on stan-users.
Warning messages:
1: There were 22 divergent transitions after warmup. Increasing adapt_delta above 0.99 may help. 
2: Examine the pairs() plot to diagnose sampling problems
 
Warning messages:
1: There were 22 divergent transitions after warmup. Increasing adapt_delta above 0.99 may help.
2: Examine the pairs() plot to diagnose sampling problems

Inference for Stan model: mctd_foursurf.
5 chains, each with iter=5000; warmup=1000; thin=1; 
post-warmup draws per chain=4000, total post-warmup draws=20000.

                        mean se_mean    sd     2.5%      25%      50%      75%
loc_detect             -8.01    0.00  0.12    -8.24    -8.09    -8.01    -7.93
scale_detect            0.67    0.00  0.12     0.46     0.59     0.66     0.75
loc_surface[1]         12.31    0.07  6.51    -1.31     8.12    12.83    16.89
loc_surface[2]         15.32    0.03  2.93     9.31    13.46    15.38    17.30
loc_surface[3]         14.55    0.04  4.40     6.05    11.60    14.56    17.49
loc_surface[4]         13.35    0.03  2.86     8.04    11.38    13.29    15.23
scale_surface[1]        5.98    0.02  2.56     1.43     4.33     5.63     7.31
scale_surface[2]        4.65    0.01  1.03     3.05     3.93     4.51     5.19
scale_surface[3]        5.26    0.01  1.69     2.44     4.12     5.08     6.18
scale_surface[4]        3.61    0.01  0.88     2.10     3.00     3.53     4.14
intercept[1]           -9.64    0.01  0.39   -10.44    -9.90    -9.62    -9.37
intercept[2]           -7.52    0.00  0.17    -7.84    -7.64    -7.52    -7.41
intercept[3]           -8.47    0.00  0.22    -8.93    -8.61    -8.46    -8.32
intercept[4]           -7.88    0.00  0.15    -8.18    -7.98    -7.87    -7.77
b_depth[1]             -1.08    0.00  0.36    -1.88    -1.30    -1.04    -0.82
b_depth[2]             -0.86    0.00  0.20    -1.28    -0.99    -0.85    -0.73
b_depth[3]             -0.98    0.00  0.26    -1.53    -1.14    -0.96    -0.79
b_depth[4]             -0.98    0.00  0.21    -1.42    -1.11    -0.97    -0.84
sig_tube                0.49    0.00  0.09     0.32     0.42     0.48     0.55
sigma[1]                2.48    0.00  0.35     1.90     2.23     2.44     2.68
sigma[2]                2.46    0.00  0.12     2.23     2.37     2.46     2.54
sigma[3]                2.37    0.00  0.17     2.06     2.25     2.36     2.48
sigma[4]                2.32    0.00  0.11     2.12     2.25     2.32     2.40
crop_tot[1]             0.03    0.00  0.07     0.01     0.01     0.02     0.03
crop_tot[2]             0.13    0.00  0.05     0.07     0.10     0.12     0.15
crop_tot[3]             0.06    0.00  0.04     0.03     0.04     0.05     0.07
crop_tot[4]             0.11    0.00  0.05     0.06     0.08     0.10     0.12
crop_tot_diff[1]        0.10    0.00  0.08     0.01     0.07     0.09     0.12
crop_tot_diff[2]        0.03    0.00  0.08    -0.05     0.02     0.03     0.05
crop_tot_diff[3]        0.08    0.00  0.08    -0.01     0.05     0.07     0.10
crop_int_diff[1]        2.12    0.01  0.43     1.35     1.81     2.10     2.40
crop_int_diff[2]        1.17    0.00  0.33     0.57     0.94     1.15     1.39
crop_int_diff[3]        1.77    0.01  0.38     1.10     1.50     1.74     2.01
crop_bdepth_diff[1]     0.22    0.00  0.38    -0.45    -0.05     0.19     0.46
crop_bdepth_diff[2]     0.11    0.00  0.41    -0.63    -0.17     0.09     0.37
crop_bdepth_diff[3]     0.10    0.00  0.37    -0.55    -0.16     0.08     0.34
lp__                -1501.06    0.36 13.93 -1528.46 -1510.43 -1500.94 -1491.64
                       97.5% n_eff Rhat
loc_detect             -7.78  5756    1
scale_detect            0.91  1782    1
loc_surface[1]         23.81  9886    1
loc_surface[2]         20.83  8554    1
loc_surface[3]         23.15 11036    1
loc_surface[4]         19.20  8642    1
scale_surface[1]       12.03 20000    1
scale_surface[2]        7.02 11915    1
scale_surface[3]        9.18 12848    1
scale_surface[4]        5.55 12658    1
intercept[1]           -8.94  2289    1
intercept[2]           -7.18  7606    1
intercept[3]           -8.06  3925    1
intercept[4]           -7.57  7160    1
b_depth[1]             -0.50  6116    1
b_depth[2]             -0.49  6515    1
b_depth[3]             -0.52  6106    1
b_depth[4]             -0.61  4418    1
sig_tube                0.69  1811    1
sigma[1]                3.26 20000    1
sigma[2]                2.71 20000    1
sigma[3]                2.73 20000    1
sigma[4]                2.55 20000    1
crop_tot[1]             0.11 17346    1
crop_tot[2]             0.26  6486    1
crop_tot[3]             0.16 10863    1
crop_tot[4]             0.24  6924    1
crop_tot_diff[1]        0.24 11732    1
crop_tot_diff[2]        0.14 15544    1
crop_tot_diff[3]        0.21 12248    1
crop_int_diff[1]        3.01  2154    1
crop_int_diff[2]        1.88  5038    1
crop_int_diff[3]        2.57  2689    1
crop_bdepth_diff[1]     1.06 11556    1
crop_bdepth_diff[2]     0.96 12184    1
crop_bdepth_diff[3]     0.90 12929    1
lp__                -1473.89  1479    1

Samples were drawn using NUTS(diag_e) at Sun Jul 31 11:29:34 2016.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
Inference for Stan model: mctd_foursurf.
5 chains, each with iter=5000; warmup=1000; thin=1; 
post-warmup draws per chain=4000, total post-warmup draws=20000.

                      mean se_mean   sd   2.5%   25%   50%   75% 97.5% n_eff
y_pred[1]             0.01    0.00 0.25   0.00  0.00  0.00  0.00  0.07 20000
y_pred[15]            0.01    0.00 0.21   0.00  0.00  0.00  0.00  0.08 20000
y_pred[28]            0.00    0.00 0.05   0.00  0.00  0.00  0.00  0.00 20000
mu_pred[1]           -4.08    0.01 0.97  -5.90 -4.74 -4.12 -3.46 -2.06  7455
mu_pred[15]          -6.95    0.00 0.55  -8.04 -7.32 -6.96 -6.60 -5.83 16331
mu_pred[28]          -9.37    0.01 0.62 -10.67 -9.76 -9.34 -8.95 -8.25  6319
mu_obs_pred[1]       -7.33    0.00 0.64  -8.57 -7.74 -7.33 -6.91 -6.06 18432
mu_obs_pred[15]      -7.10    0.00 0.54  -8.17 -7.46 -7.11 -6.76 -6.01 17728
mu_obs_pred[28]      -9.39    0.01 0.62 -10.69 -9.78 -9.36 -8.97 -8.27  6278
detect_odds_pred[1]   0.71    0.00 0.17   0.31  0.60  0.74  0.84  0.95 20000
detect_odds_pred[15]  0.77    0.00 0.13   0.45  0.70  0.80  0.87  0.95 19267
detect_odds_pred[28]  0.14    0.00 0.09   0.02  0.07  0.11  0.18  0.38 19152
pred_tot[1]           0.15    0.00 0.11   0.04  0.08  0.12  0.18  0.43 11271
                     Rhat
y_pred[1]               1
y_pred[15]              1
y_pred[28]              1
mu_pred[1]              1
mu_pred[15]             1
mu_pred[28]             1
mu_obs_pred[1]          1
mu_obs_pred[15]         1
mu_obs_pred[28]         1
detect_odds_pred[1]     1
detect_odds_pred[15]    1
detect_odds_pred[28]    1
pred_tot[1]             1

Samples were drawn using NUTS(diag_e) at Sun Jul 31 11:29:34 2016.
For each parameter, n_eff is a crude measure of effective sample size,
and Rhat is the potential scale reduction factor on split chains (at 
convergence, Rhat=1).
[1] "mean of depth: 53.7776934749621"

mean of log(nonzero root volume): -7.669138 

RMSE of mu_obs vs log observed (zeroes excluded):  2.353578 
RMSE/var:  0.3881171 

ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
ci_level: 0.8 (80% intervals)
outer_level: 0.95 (95% intervals)
Warning message:
Removed 1 rows containing missing values (geom_bar). 
Warning message:
Removed 719 rows containing non-finite values (stat_smooth). 
null device 
          1 

real	4m19.025s
user	0m54.212s
sys	0m3.913s
Extracting fits
Loading required package: ggplot2
Loading required package: StanHeaders
rstan (Version 2.11.1, packaged: 2016-07-28 18:19:31 UTC, GitRev: 85f7a56811da)
For execution on a local, multicore CPU with excess RAM we recommend calling
rstan_options(auto_write = TRUE)
options(mc.cores = parallel::detectCores())
